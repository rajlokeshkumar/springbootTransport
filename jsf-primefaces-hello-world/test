#!/bin/bash

# Check if arguments are provided
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <source_schema> <target_schema> <backup_file_path>"
    exit 1
fi

# PostgreSQL Credentials
DB_NAME="your_database"
DB_USER="your_username"

# Arguments from command line
SOURCE_SCHEMA=$1
TARGET_SCHEMA=$2
BACKUP_FILE=$3
LOG_FILE="/path/to/backup/restore.log"

# Start logging
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting restore from schema '$SOURCE_SCHEMA' to '$TARGET_SCHEMA'" >> "$LOG_FILE"

# Ensure target schema exists
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Creating target schema '$TARGET_SCHEMA' if it does not exist..." >> "$LOG_FILE"
psql -U $DB_USER -d $DB_NAME -c "CREATE SCHEMA IF NOT EXISTS $TARGET_SCHEMA;" >> "$LOG_FILE" 2>&1

# Extract schema-only dump to modify schema name
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Extracting schema from backup..." >> "$LOG_FILE"
pg_restore -U $DB_USER -d $DB_NAME -F t --schema-only "$BACKUP_FILE" > /tmp/schema_dump.sql

# Replace source schema with target schema
sed -i "s/SCHEMA $SOURCE_SCHEMA/SCHEMA $TARGET_SCHEMA/g" /tmp/schema_dump.sql
sed -i "s/$SOURCE_SCHEMA\./$TARGET_SCHEMA./g" /tmp/schema_dump.sql

# Apply modified schema dump
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Applying modified schema to target schema '$TARGET_SCHEMA'..." >> "$LOG_FILE"
psql -U $DB_USER -d $DB_NAME -f /tmp/schema_dump.sql >> "$LOG_FILE" 2>&1

# Restore only data into the target schema
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Restoring data into target schema '$TARGET_SCHEMA'..." >> "$LOG_FILE"
pg_restore -U $DB_USER -d $DB_NAME -F t --data-only --schema=$SOURCE_SCHEMA "$BACKUP_FILE" | sed "s/$SOURCE_SCHEMA\./$TARGET_SCHEMA./g" | psql -U $DB_USER -d $DB_NAME >> "$LOG_FILE" 2>&1

# Check if restore was successful
if [ $? -eq 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Restore completed successfully from '$SOURCE_SCHEMA' to '$TARGET_SCHEMA'!" >> "$LOG_FILE"
else
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Restore FAILED!" >> "$LOG_FILE"
    exit 1
fi










#!/bin/bash

# Database credentials
DB_NAME="your_database"
DB_USER="your_user"
DUMP_FILE="/path/to/your_dump_file.dump"

# Step 1: Truncate all tables before restore
echo "Truncating all tables..."
psql -U $DB_USER -d $DB_NAME -c "
DO \$\$ 
DECLARE 
    r RECORD; 
BEGIN 
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
    LOOP 
        EXECUTE 'TRUNCATE TABLE ' || quote_ident(r.tablename) || ' RESTART IDENTITY CASCADE'; 
    END LOOP; 
END \$\$;
"
echo "All tables truncated."

# Step 2: Restore the database dump
echo "Restoring the database..."
pg_restore --verbose --clean --no-owner --dbname=$DB_NAME --username=$DB_USER $DUMP_FILE

echo "Database restore completed!"















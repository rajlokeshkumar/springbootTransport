import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.*;

public class JsonFileCreator {

    public static void main(String[] args) {
        try {
            // Locate the path to current working directory (usually where the app is run from)
            Path currentPath = Paths.get("").toAbsolutePath();
            System.out.println("Current Path: " + currentPath);

            // Locate target directory
            Path targetDir = currentPath.resolve("target");

            // Folder name for jsonfile (outside target)
            Path jsonFolderPath = currentPath.resolve("jsonfile");

            // If running from target folder (e.g., via jar), go one level up
            if (currentPath.endsWith("target")) {
                jsonFolderPath = currentPath.getParent().resolve("jsonfile");
            }

            // Delete if exists
            if (Files.exists(jsonFolderPath)) {
                deleteDirectory(jsonFolderPath.toFile());
                System.out.println("Deleted existing folder: " + jsonFolderPath);
            }

            // Create new folder
            Files.createDirectories(jsonFolderPath);
            System.out.println("Created folder: " + jsonFolderPath);

            // Sample data to write
            Person person = new Person("John", "Doe", 30);
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            String jsonString = gson.toJson(person);

            // Write JSON file
            File jsonFile = jsonFolderPath.resolve("person.json").toFile();
            try (FileWriter writer = new FileWriter(jsonFile)) {
                writer.write(jsonString);
                System.out.println("JSON file created at: " + jsonFile.getAbsolutePath());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Utility to delete a directory recursively
    private static void deleteDirectory(File directory) throws IOException {
        if (directory.isDirectory()) {
            File[] entries = directory.listFiles();
            if (entries != null) {
                for (File file : entries) {
                    deleteDirectory(file);
                }
            }
        }
        if (!directory.delete()) {
            throw new IOException("Failed to delete: " + directory);
        }
    }

    // Sample data class
    static class Person {
        String firstName;
        String lastName;
        int age;

        public Person(String firstName, String lastName, int age) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.age = age;
        }
    }
}

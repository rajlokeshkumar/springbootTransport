    private static void processTable(String tableName) {
        int totalFetched = 0;
        int totalInserted = 0;
        LocalDateTime startTime = LocalDateTime.now();
        
        try (Connection pgConn = pgDataSource.getConnection();
             Statement countStmt = pgConn.createStatement()) {
            ResultSet countResult = countStmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
            int existingCount = 0;
            if (countResult.next()) {
                existingCount = countResult.getInt(1);
            }
            logger.info("Table: {} | Existing Rows: {} | Start Time: {}", tableName, existingCount, startTime);
            
            // Delete existing data before inserting new data
            try (Statement deleteStmt = pgConn.createStatement()) {
                deleteStmt.executeUpdate("DELETE FROM " + tableName);
                pgConn.commit();
            }
        } catch (SQLException e) {
            logger.error("Error processing table {}", tableName, e);
        }
        
        try (Connection db2Conn = db2DataSource.getConnection();
             Statement stmt = db2Conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {
            
            stmt.setFetchSize(BATCH_SIZE);
            int offset = 0;
            boolean hasMoreData = true;
            
            while (hasMoreData) {
                String paginatedQuery = "SELECT * FROM " + tableName + " ORDER BY id LIMIT " + FETCH_LIMIT + " OFFSET " + offset;
                try (ResultSet rs = stmt.executeQuery(paginatedQuery)) {
                    if (!rs.isBeforeFirst()) {
                        hasMoreData = false;
                        break;
                    }
                    int rowCount = 0;
                    while (rs.next()) rowCount++;
                    totalFetched += rowCount;
                    totalInserted += new DataTransferTask(rs, tableName, rowCount).call();
                }
                offset += FETCH_LIMIT;
            }
        } catch (SQLException e) {
            logger.error("Error fetching data from Db2 for table {}", tableName, e);
        }
        
        LocalDateTime endTime = LocalDateTime.now();
        logger.info("Table: {} | Rows Fetched: {} | Rows Inserted: {} | Start Time: {} | End Time: {}", tableName, totalFetched, totalInserted, startTime, endTime);
    }

amazon.dynamodb.endpoint=dynamodb.ap-south-1.amazonaws.com
amazon.aws.accesskey=AKIATUSDUQT3RZEGICML
amazon.aws.secretkey=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



import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class TreeLOCCounter {
    public static void main(String[] args) {
        // Specify the folder path containing the .java files
        String folderPath = "path/to/your/folder";

        File folder = new File(folderPath);
        if (!folder.exists() || !folder.isDirectory()) {
            System.err.println("Invalid folder path: " + folderPath);
            return;
        }

        System.out.println(folder.getAbsolutePath() + " (Root)");
        int totalLOC = processFolder(folder, 0); // Process the root folder

        // Print the total LOC for the entire folder structure
        System.out.println("\nTotal Lines of Code (LOC) in the entire structure: " + totalLOC);
    }

    // Process all files and subdirectories in the folder and return the total LOC
    public static int processFolder(File folder, int level) {
        File[] files = folder.listFiles();
        int folderLOC = 0; // To track LOC for the current folder

        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    // Print folder name with indentation
                    printWithIndentation(file.getName() + " (Folder)", level);
                    // Recursively process subdirectories and add their LOC
                    folderLOC += processFolder(file, level + 1);
                } else if (file.getName().endsWith(".java")) {
                    try {
                        int loc = countLinesOfCode(file);
                        folderLOC += loc; // Add LOC to the current folder's total
                        // Print .java file with LOC
                        printWithIndentation(file.getName() + " - LOC: " + loc, level);
                    } catch (IOException e) {
                        printWithIndentation(file.getName() + " - Error reading file", level);
                    }
                }
            }
        }

        // Print the LOC total for the current folder
        if (level > 0) { // Avoid printing for the root folder at this stage
            printWithIndentation("Total LOC in this folder: " + folderLOC, level);
        }

        return folderLOC; // Return the total LOC for this folder (and its subfolders)
    }

    // Count lines of code in a single .java file
    public static int countLinesOfCode(File file) throws IOException {
        int loc = 0;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // Skip empty lines and comments
                line = line.trim();
                if (!line.isEmpty() && !line.startsWith("//") && !line.startsWith("/*") && !line.startsWith("*")) {
                    loc++;
                }
            }
        }

        return loc;
    }

    // Print with indentation for tree structure
    public static void printWithIndentation(String message, int level) {
        for (int i = 0; i < level; i++) {
            System.out.print("  "); // Add 2 spaces per level
        }
        System.out.println(message);
    }
}
